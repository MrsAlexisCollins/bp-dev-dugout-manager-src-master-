# defines and maps the database objects in CAGE and DUGOUT

import sqlalchemy
from .. import settings


from sqlalchemy import Column, Integer, String , ForeignKey, DateTime, Boolean, Date, Numeric
from sqlalchemy.ext.declarative import declarative_base 
from sqlalchemy.orm import relationship

Base = declarative_base()

##TODO add FK relationsihps to mlb_entitas objects!

## inbound
class Mlb_stats_catching(Base):
	__tablename__ = 'stats_catching'
	__table_args__ = {'schema': 'mlbapi'}
	id = Column(Integer, primary_key = True)
	season = Column(Integer, primary_key = True)
	team = Column(Integer, primary_key = True)
	timestamp = Column(DateTime, primary_key = True)
	games_played = Column(Integer)
	runs = Column(Integer)
	home_runs = Column(Integer)
	strike_outs = Column(Integer)
	base_on_balls = Column(Integer)
	intentional_walks = Column(Integer)
	hits = Column(Integer)
	avg = Column(Numeric)
	at_bats = Column(Integer)
	obp = Column(Numeric)
	slg = Column(Numeric)
	ops = Column(Numeric)
	caught_stealing = Column(Integer)
	stolen_bases = Column(Integer)
	stolen_base_percentage = Column(Numeric)
	era = Column(Numeric)
	earned_runs = Column(Integer)
	whip = Column(Numeric)
	batters_faced = Column(Integer)
	games_pitched = Column(Integer)
	hit_batsmen = Column(Integer)
	wild_pitches = Column(Integer)
	pickoffs = Column(Integer)
	total_bases = Column(Integer)
	strikeout_walk_ratio = Column(Numeric)
	strikeouts_per_9_inn = Column(Numeric)
	walks_per_9_inn = Column(Numeric)
	hits_per_9_inn = Column(Numeric)
	catchers_interference = Column(Integer)
	sac_bunts = Column(Integer)
	sac_flies = Column(Integer)
	def __repr__(self):
		return "{}({!r})".format(self.__class__.__name__, self.__dict__)


class Mlb_stats_fielding(Base):
	__tablename__ = 'stats_fielding'
	__table_args__ = {'schema': 'mlbapi'}
	id = Column(Integer,  primary_key = True)
	season = Column(Integer, primary_key = True)
	team = Column(Integer, primary_key = True)
	position = Column(String, primary_key = True)
	timestamp = Column(DateTime, primary_key = True)
	assists = Column(Integer)
	put_outs = Column(Integer)
	errors = Column(Integer)
	chances = Column(Integer)
	fielding = Column(Numeric)
	range_factor_per_game = Column(Numeric)
	range_factor_per_9_inn = Column(Numeric)
	innings = Column(Numeric)
	games = Column(Integer)
	games_started = Column(Integer)
	double_plays = Column(Integer)
	triple_plays = Column(Integer)
	throwing_errors = Column(Integer)
	def __repr__(self):
		return "{}({!r})".format(self.__class__.__name__, self.__dict__)


class Mlb_stats_hitting(Base):
	__tablename__ = 'stats_hitting'
	__table_args__ = {'schema': 'mlbapi'}
	id = Column(Integer,  primary_key = True)
	season = Column(Integer, primary_key = True)
	team = Column(Integer, primary_key = True)
	timestamp = Column(DateTime, primary_key = True)
	games_played = Column(Integer)
	ground_outs = Column(Integer)
	air_outs = Column(Integer)
	runs = Column(Integer)
	doubles = Column(Integer)
	triples = Column(Integer)
	home_runs = Column(Integer)
	strike_outs = Column(Integer)
	base_on_balls = Column(Integer)
	intentional_walks = Column(Integer)
	hits = Column(Integer)
	hit_by_pitch = Column(Integer)
	avg = Column(Numeric)
	at_bats = Column(Integer)
	obp = Column(Numeric)
	slg = Column(Numeric)
	ops = Column(Numeric)
	caught_stealing = Column(Integer)
	stolen_bases = Column(Integer)
	stolen_base_percentage = Column(Numeric)
	ground_into_double_play = Column(Integer)
	number_of_pitches = Column(Integer)
	plate_appearances = Column(Integer)
	total_bases = Column(Integer)
	rbi = Column(Integer)
	left_on_base = Column(Integer)
	sac_bunts = Column(Integer)
	sac_flies = Column(Integer)
	babip = Column(Numeric)
	ground_outs_to_airouts = Column(Numeric)
	at_bats_per_home_run = Column(Numeric)
	def __repr__(self):
		return "{}({!r})".format(self.__class__.__name__, self.__dict__)


class Mlb_stats_pitching(Base):
	__tablename__ = 'stats_pitching'
	__table_args__ = {'schema': 'mlbapi'}
	id = Column(Integer, primary_key = True)
	season = Column(Integer, primary_key = True)
	team = Column(Integer,  primary_key = True)
	timestamp = Column(DateTime, primary_key = True)
	games_played = Column(Integer)
	games_started = Column(Integer)
	ground_outs = Column(Integer)
	air_outs = Column(Integer)
	runs = Column(Integer)
	doubles = Column(Integer)
	triples = Column(Integer)
	home_runs = Column(Integer)
	strike_outs = Column(Integer)
	base_on_balls = Column(Integer)
	intentional_walks = Column(Integer)
	hits = Column(Integer)
	avg = Column(Numeric)
	at_bats = Column(Integer)
	obp = Column(Numeric)
	slg = Column(Numeric)
	ops = Column(Numeric)
	caught_stealing = Column(Integer)
	stolen_bases = Column(Integer)
	stolen_base_percentage = Column(Numeric)
	ground_into_double_play = Column(Integer)
	number_of_pitches = Column(Integer)
	era = Column(Numeric)
	innings_pitched = Column(Numeric)
	wins = Column(Integer)
	losses = Column(Integer)
	saves = Column(Integer)
	save_opportunities = Column(Integer)
	holds = Column(Integer)
	blown_saves = Column(Integer)
	earned_runs = Column(Integer)
	whip = Column(Numeric)
	batters_faced = Column(Integer)
	games_pitched = Column(Integer)
	complete_games = Column(Integer)
	shutouts = Column(Integer)
	strikes = Column(Integer)
	strike_percentage = Column(Numeric)
	hit_batsmen = Column(Integer)
	balks = Column(Integer)
	wild_pitches = Column(Integer)
	pickoffs = Column(Integer)
	total_bases = Column(Integer)
	ground_outs_to_airouts = Column(Numeric)
	win_percentage = Column(Numeric)
	pitches_per_inning = Column(Numeric)
	games_finished = Column(Integer)
	strikeout_walk_ratio = Column(Numeric)
	strikeouts_per_9_inn = Column(Numeric)
	walks_per_9_inn = Column(Numeric)
	hits_per_9_inn = Column(Numeric)
	runs_scored_per_9 = Column(Numeric)
	home_runs_per_9 = Column(Numeric)
	inherited_runners = Column(Integer)
	inherited_runners_scored = Column(Integer)
	def __repr__(self):
		return "{}({!r})".format(self.__class__.__name__, self.__dict__)
